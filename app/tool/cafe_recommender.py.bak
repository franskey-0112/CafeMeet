import asyncio
import json
import math
import os
import uuid
from datetime import datetime
from typing import Any, Dict, List, Optional, Tuple

import aiofiles
import aiohttp
from pydantic import Field

from app.tool.base import BaseTool, ToolResult


class CafeRecommender(BaseTool):
    """咖啡馆推荐工具，基于多个地点计算最佳会面位置并推荐咖啡馆"""

    name: str = "cafe_recommender"
    description: str = """推荐适合多人会面的咖啡馆。
该工具基于多个地点的位置信息，计算最佳会面地点，并推荐附近的咖啡馆。
工具会生成包含地图和推荐信息的HTML页面，提供详细的店铺信息、地理位置和交通建议。
"""
    parameters: dict = {
        "type": "object",
        "properties": {
            "locations": {
                "type": "array",
                "description": "(必填) 所有参与者的位置描述列表，每个元素为一个地点描述字符串，如['北京朝阳区望京宝星园', '海淀中关村地铁站']",
                "items": {"type": "string"},
            },
            "keywords": {
                "type": "string",
                "description": "(可选) 搜索关键词，默认为'咖啡馆'",
                "default": "咖啡馆",
            },
            "user_requirements": {
                "type": "string",
                "description": "(可选) 用户的额外需求，如'停车方便'，'环境安静'等",
                "default": "",
            },
        },
        "required": ["locations"],
    }

    # 高德地图API密钥
    _api_key: str = "890047cfc3d50b238af0e319c4f09ce5"

    # 缓存请求结果以减少API调用
    _geocode_cache: Dict[str, Dict] = Field(default_factory=dict)
    _poi_cache: Dict[str, List] = Field(default_factory=dict)

    async def execute(
        self,
        locations: List[str],
        keywords: str = "咖啡馆",
        user_requirements: str = "",
    ) -> ToolResult:
        """
        执行咖啡馆推荐

        Args:
            locations: 多个地点描述的列表
            keywords: 搜索关键词，默认为"咖啡馆"
            user_requirements: 用户的额外需求

        Returns:
            ToolResult: 包含推荐结果和生成的HTML页面路径
        """
        try:
            # 1. 获取每个地点的坐标
            coordinates = []
            location_info = []

            for location in locations:
                geocode_result = await self._geocode(location)
                if not geocode_result:
                    return ToolResult(output=f"无法找到地点: {location}")

                # 提取坐标
                lng, lat = geocode_result["location"].split(",")
                coordinates.append((float(lng), float(lat)))

                # 保存地点信息
                location_info.append({
                    "name": location,
                    "formatted_address": geocode_result.get("formatted_address", location),
                    "location": geocode_result["location"],
                    "lng": float(lng),
                    "lat": float(lat)
                })

            # 2. 计算中心点
            center_point = self._calculate_center_point(coordinates)

            # 3. 搜索中心点附近的咖啡馆
            cafes = await self._search_pois(
                f"{center_point[0]},{center_point[1]}",
                keywords,
                radius=2000  # 2公里范围内
            )

            if not cafes:
                return ToolResult(output=f"在计算的中心点附近找不到{keywords}")

            # 4. 根据评分、距离等因素筛选和排序咖啡馆
            recommended_cafes = self._rank_cafes(cafes, center_point, user_requirements)

            # 5. 生成HTML页面
            html_path = await self._generate_html_page(
                location_info,
                recommended_cafes,
                center_point,
                user_requirements
            )

            # 6. 构建返回结果
            result_text = self._format_result_text(location_info, recommended_cafes, html_path)

            return ToolResult(output=result_text)

        except Exception as e:
            logger.error(f"咖啡馆推荐失败: {str(e)}")
            return ToolResult(output=f"推荐失败: {str(e)}")

    async def _geocode(self, address: str) -> Optional[Dict[str, Any]]:
        """通过高德地图API获取地址的经纬度"""
        # 如果缓存中存在，直接返回
        if address in self._geocode_cache:
            return self._geocode_cache[address]

        url = "https://restapi.amap.com/v3/geocode/geo"
        params = {
            "key": self._api_key,
            "address": address,
            "output": "json"
        }

        async with aiohttp.ClientSession() as session:
            async with session.get(url, params=params) as response:
                if response.status != 200:
                    logger.error(f"高德地图API请求失败: {response.status}")
                    return None

                data = await response.json()

                if data["status"] != "1" or not data["geocodes"]:
                    logger.error(f"地理编码失败: {data}")
                    return None

                result = data["geocodes"][0]
                self._geocode_cache[address] = result
                return result

    def _calculate_center_point(self, coordinates: List[Tuple[float, float]]) -> Tuple[float, float]:
        """计算多个坐标的几何中心点"""
        if not coordinates:
            raise ValueError("至少需要一个坐标")

        # 简单的算术平均
        avg_lng = sum(lng for lng, _ in coordinates) / len(coordinates)
        avg_lat = sum(lat for _, lat in coordinates) / len(coordinates)

        return (avg_lng, avg_lat)

    async def _search_pois(
        self,
        location: str,
        keywords: str,
        radius: int = 2000,
        types: str = "050000",  # 餐饮类POI
        offset: int = 20
    ) -> List[Dict]:
        """搜索兴趣点"""
        cache_key = f"{location}_{keywords}_{radius}_{types}"
        if cache_key in self._poi_cache:
            return self._poi_cache[cache_key]

        url = "https://restapi.amap.com/v3/place/around"
        params = {
            "key": self._api_key,
            "location": location,
            "keywords": keywords,
            "types": types,
            "radius": radius,
            "offset": offset,
            "page": 1,
            "extensions": "all"
        }

        async with aiohttp.ClientSession() as session:
            async with session.get(url, params=params) as response:
                if response.status != 200:
                    logger.error(f"高德地图POI搜索失败: {response.status}")
                    return []

                data = await response.json()

                if data["status"] != "1":
                    logger.error(f"POI搜索失败: {data}")
                    return []

                pois = data.get("pois", [])
                self._poi_cache[cache_key] = pois
                return pois

    def _rank_cafes(
        self,
        cafes: List[Dict],
        center_point: Tuple[float, float],
        user_requirements: str
    ) -> List[Dict]:
        """根据多种因素对咖啡馆进行排序"""
        # 提取用户需求关键词
        requirement_keywords = {
            "停车": ["停车", "车位", "停车场"],
            "安静": ["安静", "环境好", "氛围"],
            "商务": ["商务", "会议", "办公"],
            "交通": ["交通", "地铁", "公交"]
        }

        user_priorities = []
        for key, keywords in requirement_keywords.items():
            if any(kw in user_requirements for kw in keywords):
                user_priorities.append(key)

        # 为每个咖啡馆计算综合分数
        for cafe in cafes:
            score = 0

            # 基础分 - 评分 (0-5分)
            rating = float(cafe.get("biz_ext", {}).get("rating", "0") or "0")
            score += rating * 10  # 0-50分

            # 距离分 - 距离中心点越近越好 (0-20分)
            cafe_lng, cafe_lat = cafe["location"].split(",")
            distance = self._calculate_distance(
                center_point,
                (float(cafe_lng), float(cafe_lat))
            )
            # 距离在1公里内得20分，超过2公里得0分，线性衰减
            distance_score = max(0, 20 * (1 - (distance / 2000)))
            score += distance_score

            # 用户需求加分 (每项最多10分)
            for priority in user_priorities:
                if priority == "停车" and ("停车" in cafe.get("tag", "") or "免费停车" in cafe.get("business", "")):
                    score += 10
                elif priority == "安静" and ("环境" in cafe.get("tag", "") or "安静" in cafe.get("tag", "")):
                    score += 10
                elif priority == "商务" and ("商务" in cafe.get("tag", "") or "会议" in cafe.get("business", "")):
                    score += 10
                elif priority == "交通" and ("地铁" in cafe.get("tag", "") or "公交" in cafe.get("business", "")):
                    score += 10

            # 保存分数
            cafe["_score"] = score

        # 按分数排序
        ranked_cafes = sorted(cafes, key=lambda x: x.get("_score", 0), reverse=True)

        # 返回前5个结果
        return ranked_cafes[:5]

    def _calculate_distance(
        self,
        point1: Tuple[float, float],
        point2: Tuple[float, float]
    ) -> float:
        """计算两点之间的距离（米）"""
        # 使用简化的平面距离计算（对于城市内小范围足够精确）
        # 1经度约为85km，1纬度约为111km（在中国地区）
        lng1, lat1 = point1
        lng2, lat2 = point2

        # 将经纬度转换为距离（米）
        x = (lng2 - lng1) * 85000
        y = (lat2 - lat1) * 111000

        return math.sqrt(x*x + y*y)

    async def _generate_html_page(
        self,
        locations: List[Dict],
        cafes: List[Dict],
        center_point: Tuple[float, float],
        user_requirements: str
    ) -> str:
        """生成HTML页面并返回文件路径"""
        # 生成HTML内容
        html_content = self._generate_html_content(locations, cafes, center_point, user_requirements)

        # 生成唯一文件名
        timestamp = datetime.now().strftime("%Y%m%d%H%M%S")
        unique_id = str(uuid.uuid4())[:8]
        file_name = f"cafe_recommendation_{timestamp}_{unique_id}.html"

        # 确保目录存在
        os.makedirs("workspace/js_src", exist_ok=True)
        file_path = f"workspace/js_src/{file_name}"

        # 写入文件
        async with aiofiles.open(file_path, 'w', encoding='utf-8') as f:
            await f.write(html_content)

        return file_path

    def _generate_html_content(
        self,
        locations: List[Dict],
        cafes: List[Dict],
        center_point: Tuple[float, float],
        user_requirements: str
    ) -> str:
        """生成HTML页面内容"""
        # 生成位置标记数据
        location_markers = []
        for idx, loc in enumerate(locations):
            location_markers.append({
                "name": f"地点{idx+1}: {loc['name']}",
                "position": [loc["lng"], loc["lat"]],
                "icon": "location"
            })

        # 生成咖啡馆标记数据
        cafe_markers = []
        for cafe in cafes:
            lng, lat = cafe["location"].split(",")
            cafe_markers.append({
                "name": cafe["name"],
                "position": [float(lng), float(lat)],
                "icon": "cafe"
            })

        # 中心点标记
        center_marker = {
            "name": "最佳会面点",
            "position": [center_point[0], center_point[1]],
            "icon": "center"
        }

        # 所有标记点
        all_markers = [center_marker] + location_markers + cafe_markers

        # 咖啡馆详细信息表
        cafe_details = []
        for cafe in cafes:
            # 提取评分
            rating = cafe.get("biz_ext", {}).get("rating", "暂无评分")

            # 提取地址
            address = cafe.get("address", "地址未知")

            # 提取营业时间
            business_hours = cafe.get("business_hours", "营业时间未知")
            if isinstance(business_hours, list) and business_hours:
                business_hours = "; ".join(business_hours)

            # 提取电话
            tel = cafe.get("tel", "电话未知")

            # 提取标签
            tags = cafe.get("tag", "").split(";")
            tag_html = "".join([f'<span class="tag">{tag}</span>' for tag in tags if tag])

            # 计算到中心点的距离
            lng, lat = cafe["location"].split(",")
            distance = self._calculate_distance(
                center_point,
                (float(lng), float(lat))
            )
            distance_text = f"{distance/1000:.1f}公里"

            # 生成详情HTML
            detail = {
                "name": cafe["name"],
                "rating": rating,
                "address": address,
                "hours": business_hours,
                "tel": tel,
                "tags": tag_html,
                "distance": distance_text
            }
            cafe_details.append(detail)

        # 生成HTML页面
        html = f"""<!DOCTYPE html>
<html lang="zh-CN">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>最佳会面咖啡馆推荐</title>
    <style>
        body {{
            font-family: 'PingFang SC', 'Microsoft YaHei', sans-serif;
            line-height: 1.6;
            margin: 0;
            padding: 0;
            color: #333;
            background-color: #f5f5f5;
        }}

        .container {{
            max-width: 1200px;
            margin: 0 auto;
            padding: 20px;
        }}

        header {{
            background-color: #2c3e50;
            color: white;
            padding: 20px 0;
            text-align: center;
            margin-bottom: 30px;
            border-radius: 5px;
        }}

        h1, h2, h3 {{
            margin-top: 0;
        }}

        .map-container {{
            height: 500px;
            margin-bottom: 30px;
            border-radius: 5px;
            overflow: hidden;
            box-shadow: 0 2px 10px rgba(0, 0, 0, 0.1);
        }}

        #map {{
            height: 100%;
            width: 100%;
        }}

        .cafe-list {{
            margin-bottom: 30px;
        }}

        .cafe-card {{
            background-color: white;
            border-radius: 5px;
            padding: 20px;
            margin-bottom: 20px;
            box-shadow: 0 2px 10px rgba(0, 0, 0, 0.1);
        }}

        .cafe-header {{
            display: flex;
            justify-content: space-between;
            align-items: center;
            margin-bottom: 10px;
        }}

        .cafe-name {{
            font-size: 20px;
            font-weight: bold;
            margin: 0;
        }}

        .cafe-rating {{
            background-color: #f39c12;
            color: white;
            padding: 5px 10px;
            border-radius: 3px;
            font-weight: bold;
        }}

        .cafe-details {{
            display: grid;
            grid-template-columns: 100px 1fr;
            gap: 10px;
        }}

        .cafe-label {{
            font-weight: bold;
            color: #7f8c8d;
        }}

        .tag {{
            display: inline-block;
            background-color: #e0e0e0;
            padding: 3px 8px;
            margin-right: 5px;
            margin-bottom: 5px;
            border-radius: 3px;
            font-size: 12px;
        }}

        .location-info {{
            background-color: white;
            border-radius: 5px;
            padding: 20px;
            margin-bottom: 30px;
            box-shadow: 0 2px 10px rgba(0, 0, 0, 0.1);
        }}

        .location-table {{
            width: 100%;
            border-collapse: collapse;
        }}

        .location-table th, .location-table td {{
            padding: 10px;
            text-align: left;
            border-bottom: 1px solid #ddd;
        }}

        .location-table th {{
            background-color: #f2f2f2;
        }}

        .summary {{
            background-color: #e8f5e9;
            border-radius: 5px;
            padding: 20px;
            margin-bottom: 30px;
            box-shadow: 0 2px 10px rgba(0, 0, 0, 0.1);
        }}

        .footer {{
            text-align: center;
            margin-top: 50px;
            padding: 20px;
            color: #7f8c8d;
            font-size: 14px;
        }}
    </style>
</head>
<body>
    <div class="container">
        <header>
            <h1>最佳会面咖啡馆推荐</h1>
            <p>根据您提供的地点，我们推荐了几家适合会面的咖啡馆</p>
        </header>

        <div class="summary">
            <h2>推荐摘要</h2>
            <p>我们基于{len(locations)}个地点计算了最佳会面点，并在附近找到了{len(cafes)}家适合会面的咖啡馆。</p>
            <p><strong>您的需求：</strong>{user_requirements or "无特殊需求"}</p>
        </div>

        <div class="location-info">
            <h2>地点信息</h2>
            <table class="location-table">
                <thead>
                    <tr>
                        <th>地点</th>
                        <th>详细地址</th>
                    </tr>
                </thead>
                <tbody>
                    {"".join([f"<tr><td>{loc['name']}</td><td>{loc['formatted_address']}</td></tr>" for loc in locations])}
                </tbody>
            </table>
        </div>

        <h2>地图展示</h2>
        <div class="map-container">
            <div id="map"></div>
        </div>

        <div class="cafe-list">
            <h2>推荐咖啡馆</h2>
            {"".join([f'''
            <div class="cafe-card">
                <div class="cafe-header">
                    <h3 class="cafe-name">{cafe['name']}</h3>
                    <span class="cafe-rating">评分: {cafe['rating']}</span>
                </div>
                <div class="cafe-details">
                    <div class="cafe-label">地址:</div>
                    <div>{cafe['address']}</div>
                    <div class="cafe-label">营业时间:</div>
                    <div>{cafe['hours']}</div>
                    <div class="cafe-label">电话:</div>
                    <div>{cafe['tel']}</div>
                    <div class="cafe-label">标签:</div>
                    <div>{cafe['tags']}</div>
                    <div class="cafe-label">距离中心:</div>
                    <div>{cafe['distance']}</div>
                </div>
            </div>''' for cafe in cafe_details])}
        </div>

        <div class="transportation">
            <h2>交通与停车建议</h2>
            <div class="cafe-card">
                <h3>前往方式</h3>
                <p>最佳会面点位于{center_point[0]:.6f}, {center_point[1]:.6f}附近，各地点前往方式如下：</p>
                <ul>
                    {"".join([f"<li><strong>{loc['name']}</strong>: 距离中心点约{self._calculate_distance(center_point, (loc['lng'], loc['lat']))/1000:.1f}公里</li>" for loc in locations])}
                </ul>

                <h3>停车建议</h3>
                <ul>
                    <li>大部分推荐的咖啡馆周边有停车场或提供停车服务</li>
                    <li>建议使用高德地图或百度地图导航到目的地</li>
                    <li>高峰时段建议提前30分钟出发，以便寻找停车位</li>
                </ul>
            </div>
        </div>

        <div class="footer">
            <p>© {2025} 最佳会面点推荐 | 数据来源: 高德地图</p>
        </div>
    </div>

    <script type="text/javascript">
        window.onload = function() {
            // 初始化地图
            var map = new AMap.Map('map', {
                zoom: 13,
                center: [{center_point[0]}, {center_point[1]}]
            });

            // 添加标记点
            var markers = {json.dumps(all_markers)};

            // 标记图标
            var iconStyles = {
                location: new AMap.Icon({
                    size: new AMap.Size(25, 34),
                    image: 'https://webapi.amap.com/theme/v1.3/markers/n/mark_b1.png',
                    imageSize: new AMap.Size(25, 34)
                }),
                cafe: new AMap.Icon({
                    size: new AMap.Size(25, 34),
                    image: 'https://webapi.amap.com/theme/v1.3/markers/n/mark_r.png',
                    imageSize: new AMap.Size(25, 34)
                }),
                center: new AMap.Icon({
                    size: new AMap.Size(25, 34),
                    image: 'https://webapi.amap.com/theme/v1.3/markers/n/mark_g.png',
                    imageSize: new AMap.Size(25, 34)
                })
            };

            // 添加所有标记
            markers.forEach(function(marker) {
                var mapMarker = new AMap.Marker({
                    position: marker.position,
                    title: marker.name,
                    icon: iconStyles[marker.icon]
                });
                mapMarker.setMap(map);
            });
        }
    </script>

    <script type="text/javascript" src="https://webapi.amap.com/maps?v=2.0&key=890047cfc3d50b238af0e319c4f09ce5"></script>
</body>
</html>
"""
        return html

    def _format_result_text(
        self,
        locations: List[Dict],
        cafes: List[Dict],
        html_path: str
    ) -> str:
        """格式化返回结果文本"""
        num_cafes = len(cafes)

        result = [
            f"## 已为您找到{num_cafes}家适合会面的咖啡馆",
            "",
            "### 推荐咖啡馆:",
        ]

        for i, cafe in enumerate(cafes):
            rating = cafe.get("biz_ext", {}).get("rating", "暂无评分")
            address = cafe.get("address", "地址未知")
            result.append(f"{i+1}. **{cafe['name']}** (评分: {rating})")
            result.append(f"   地址: {address}")
            result.append("")

        result.append(f"详细信息已生成到HTML页面: {html_path}")
        result.append("可在浏览器中打开查看详细地图和咖啡馆信息。")

        return "\n".join(result)
